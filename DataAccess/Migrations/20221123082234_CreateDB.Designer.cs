// <auto-generated />
using System;
using DataAccess.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ECContext))]
    [Migration("20221123082234_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Concrete.AcademicYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImageUrl")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserTypeId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("GradeId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("QuestionLevelId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EntityLayer.Concrete.QuestionLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("QuestionLevels");
                });

            modelBuilder.Entity("EntityLayer.Concrete.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowAnswer")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ResponseCount")
                        .HasColumnType("float");

                    b.Property<string>("ResponseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountForQuestion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatUserId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.AcademicYear", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("AcademicYears")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("AcademicYearsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("CreatUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUser", b =>
                {
                    b.HasOne("EntityLayer.Concrete.UserType", "UserType")
                        .WithMany("AppUsers")
                        .HasForeignKey("UserTypeId");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Grade", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("Grades")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("GradesM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("CreatUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Question", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AcademicYear", "AcademicYear")
                        .WithMany("Questions")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("Questions")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.Grade", "Grade")
                        .WithMany("Questions")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("QuestionsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.QuestionLevel", "QuestionLevel")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLevelId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatUser");

                    b.Navigation("Grade");

                    b.Navigation("ModifyUser");

                    b.Navigation("QuestionLevel");

                    b.Navigation("QuestionType");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EntityLayer.Concrete.QuestionLevel", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("QuestionLevels")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("QuestionLevelsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("CreatUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EntityLayer.Concrete.QuestionType", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("QuestionTypes")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("QuestionTypesM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("CreatUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Response", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AcademicYear", "AcademicYear")
                        .WithMany("Responses")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("Responses")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("ResponsesM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.QuestionType", "QuestionType")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Subject", "Subject")
                        .WithMany("Responses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Question");

                    b.Navigation("QuestionType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Section", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("Sections")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("SectionsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.Subject", "Subject")
                        .WithMany("Sections")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CreatUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Subject", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", "CreatUser")
                        .WithMany("Subjects")
                        .HasForeignKey("CreatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("EntityLayer.Concrete.AppUser", "ModifyUser")
                        .WithMany("SubjectsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("CreatUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.AcademicYear", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUser", b =>
                {
                    b.Navigation("AcademicYears");

                    b.Navigation("AcademicYearsM");

                    b.Navigation("Grades");

                    b.Navigation("GradesM");

                    b.Navigation("QuestionLevels");

                    b.Navigation("QuestionLevelsM");

                    b.Navigation("QuestionTypes");

                    b.Navigation("QuestionTypesM");

                    b.Navigation("Questions");

                    b.Navigation("QuestionsM");

                    b.Navigation("Responses");

                    b.Navigation("ResponsesM");

                    b.Navigation("Sections");

                    b.Navigation("SectionsM");

                    b.Navigation("Subjects");

                    b.Navigation("SubjectsM");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Grade", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Question", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.QuestionLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EntityLayer.Concrete.QuestionType", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("EntityLayer.Concrete.UserType", b =>
                {
                    b.Navigation("AppUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
